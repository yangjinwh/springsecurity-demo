<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <!-- 放行资源 -->
    <http pattern="/toLogin" security="none"/>
    <http pattern="/login/fail" security="none"/>
    <http pattern="/img/**" security="none"/>

    <!-- 由于dispatcherServlet的url为/，所以直接访问1.png也不行，可以设置静态资源不过滤mvc:resources -->

    <!--
        auto-config：表示引入了springsecurity相关的过滤器
        use-expression：是否使用spel表达式
    -->
    <http auto-config="true" use-expressions="false">
        <!-- 所有带有admin的请求都需要ROLE_ADMIN权限 -->
        <intercept-url pattern="/**" access="ROLE_ADMIN"></intercept-url>

        <!-- 设置登录的信息 -->
        <form-login login-page="/toLogin"
                    login-processing-url="/login"
                    default-target-url="/admin/user/list"
                    always-use-default-target="true"
                    authentication-failure-url="/login/fail"/>

        <!-- 设置登出的信息 -->
        <logout logout-url="/logout"
                logout-success-url="/img/1.png"/>
        <csrf disabled="true"/>
    </http>

    <!-- 授权认证管理器 -->
    <authentication-manager>
        <authentication-provider user-service-ref="userDetailServiceImpl">
            <!-- 引入加密对象 -->
            <password-encoder ref="encoder"/>

            <!-- 1.写死的方式 -->
            <!--<user-service>
                <user name="bjtu" authorities="ROLE_ADMIN" password="123" disabled="false"></user>
            </user-service>-->

            <!-- 2.从数据库查询 -->
            <!--<jdbc-user-service data-source-ref="dataSource" users-by-username-query="select * from users where username=?"/>-->

            <!-- 3.使用自定义校验器 -->
            <!-- user-service-ref -->
        </authentication-provider>
    </authentication-manager>

    <!-- 实际上数据库中的密码要加密 -->
    <beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="9"/>
    </beans:bean>

    <!-- 阿里的数据库连接池Druid：获取数据库的操作 -->
    <beans:bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <beans:property name="username" value="root"/>
        <beans:property name="password" value="123"/>
        <beans:property name="url" value="jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    </beans:bean>

    <!-- 自定义的校验器放到spirng中 -->
    <beans:bean id="userDetailServiceImpl" class="com.bjtu.service.UserDetailServiceImpl"/>
</beans:beans>